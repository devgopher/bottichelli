// <auto-generated />
using System;
using Botticelli.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Botticelli.Server.Data.Migrations
{
    [DbContext(typeof(ServerDataContext))]
    partial class BotInfoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("Botticelli.Server.Data.Entities.Bot.BotAdditionalInfo", b =>
                {
                    b.Property<string>("BotId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BotInfoBotId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemValue")
                        .HasColumnType("TEXT");

                    b.HasKey("BotId");

                    b.HasIndex("BotInfoBotId");

                    b.ToTable("BotAdditionalInfo");
                });

            modelBuilder.Entity("Botticelli.Server.Data.Entities.Bot.BotInfo", b =>
                {
                    b.Property<string>("BotId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BotKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("BotName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastKeepAlive")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("BotId");

                    b.ToTable("BotInfo");
                });

            modelBuilder.Entity("Botticelli.Server.Data.Entities.Bot.Broadcasting.Broadcast", b =>
                {
                    b.Property<string>("BotId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("BotId");

                    b.ToTable("Broadcasts");
                });

            modelBuilder.Entity("Botticelli.Server.Data.Entities.Bot.Broadcasting.BroadcastAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BroadcastBotId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MediaType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BroadcastBotId");

                    b.ToTable("BroadcastAttachments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<string>", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRoles");

                    b.HasData(
                        new
                        {
                            Id = "1027bf58-8ea4-4042-9651-690ef7eff777",
                            ConcurrencyStamp = "12/01/2024 15:54:52",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "19291d61-00bc-497c-8162-aa1ed022d1a7",
                            ConcurrencyStamp = "12/01/2024 15:54:52",
                            Name = "bot_manager",
                            NormalizedName = "BOT_MANAGER"
                        },
                        new
                        {
                            Id = "0704f04d-1faa-44ab-b0fa-3ec05a168255",
                            ConcurrencyStamp = "12/01/2024 15:54:52",
                            Name = "viewer",
                            NormalizedName = "VIEWER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser<string>", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("ApplicationUserRoles");
                });

            modelBuilder.Entity("Botticelli.Server.Data.Entities.Bot.BotAdditionalInfo", b =>
                {
                    b.HasOne("Botticelli.Server.Data.Entities.Bot.BotInfo", null)
                        .WithMany("AdditionalInfo")
                        .HasForeignKey("BotInfoBotId");
                });

            modelBuilder.Entity("Botticelli.Server.Data.Entities.Bot.Broadcasting.BroadcastAttachment", b =>
                {
                    b.HasOne("Botticelli.Server.Data.Entities.Bot.Broadcasting.Broadcast", null)
                        .WithMany("Attachments")
                        .HasForeignKey("BroadcastBotId");
                });

            modelBuilder.Entity("Botticelli.Server.Data.Entities.Bot.BotInfo", b =>
                {
                    b.Navigation("AdditionalInfo");
                });

            modelBuilder.Entity("Botticelli.Server.Data.Entities.Bot.Broadcasting.Broadcast", b =>
                {
                    b.Navigation("Attachments");
                });
#pragma warning restore 612, 618
        }
    }
}
